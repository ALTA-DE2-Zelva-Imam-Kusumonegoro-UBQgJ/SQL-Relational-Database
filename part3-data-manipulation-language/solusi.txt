RELEASE 1:

1) Insert
    1.a) Insert 3 product type.

    INSERT INTO "OLshop"."product_type" (product_type_id, classification)
VALUES (1,'entertainment'),(2,'food'),(3,'electronic');


    1.b) Insert 2 product dengan product type id = 1

INSERT INTO "OLshop"."product" 
(product_id,product_name,product_type_id)
VALUES (1,'xbox',1),(2,'playstastion',1),(3,'switch',1);

    1.c) Insert 3 product dengan product type id = 2

INSERT INTO "OLshop"."product" 
(product_id,product_name,product_type_id)
VALUES (4,'indomie',2),(5,'mie_sedap',2),(6,'sosis',2);


    1.d) Insert 3 product dengan product type id = 3

INSERT INTO "OLshop"."product" 
(product_id,product_name,product_type_id)
VALUES (7,'xiaomi',3),(8,'iphone',3),(9,'asus',3);


    1.e) Insert product description pada setiap product.

INSERT INTO "OLshop"."product_description" (product_id,description)
VALUES (1,'Keren'), (2,'bagus'), (3,'mantap');


    1.f) Insert 3 payment methods.

INSERT INTO "OLshop"."payment_method" (payment_method_id,description)
VALUES (1,'credit card'), (2,'dana'), (3,'OVO');


    1.g) Insert 5 user pada tabel user.

INSERT INTO "OLshop"."user" (user_id,username)
VALUES (1,'John doe'), (2,'jane doe'), (3,'enigma'),(4,'incognito'), (5,'adam smith');

    1.h) Insert 3 transaksi di masing-masing user (min 3 user). (soal berlanjut ke soal 1.j)

INSERT INTO "OLshop"."transaction" (transaction_id,transaction_detail,user_id)
VALUES (1,CURRENT_TIMESTAMP,1), (2,CURRENT_TIMESTAMP,2), (3,CURRENT_TIMESTAMP,3);

    1.i) Insert 3 product di masing-masing transaksi.

CREATE TABLE "OLshop"."product_transaction"(
	product_transaction_id VARCHAR(255),
    product_id INT REFERENCES "OLshop"."product"(product_id),
	transaction_id  INT REFERENCES "OLshop"."transaction"(transaction_id),
	
    PRIMARY KEY (product_transaction_id)
);

INSERT INTO "OLshop"."product_transaction"(product_transaction_id,product_id,transaction_id)
VALUES ('T1',1,3), ('T2',2,2), ('T3',3,2);

2) Select
    2.a) Tampilkan nama user / pelanggan dengan gender Laki-laki / M.

SELECT username, gender
FROM "user" WHERE gender = 'Laki-laki' OR gender = 'M'

    2.b) Tampilkan product dengan id = 3.

SELECT *
FROM "product" WHERE product_id = 3;

    2.c) Tampilkan data pelanggan yang created_at dalam range 7 hari kebelakang dan mempunyai nama mengandung kata ‘a’.

SELECT *
FROM "user"
WHERE
    "create_at" >= CURRENT_DATE  - INTERVAL '7 days'
    AND "username" LIKE '%a%';


    2.d) Hitung jumlah user / pelanggan dengan status gender Perempuan.

SELECT COUNT(*)
FROM "user" WHERE gender = "Perempuan" OR gender = "W" 

    2.e) Tampilkan data pelanggan dengan urutan sesuai nama abjad

SELECT *
FROM "user"
ORDER BY "username" ASC;

    2.f) Tampilkan 5 data transaksi dengan product id = 3

SELECT *
FROM "transaction"
WHERE "product_id" = 3 
LIMIT 5;

3. Update
    3.a) Ubah data product id 1 dengan nama ‘product dummy’.

UPDATE "product" SET
product_name = 'product dummy'
WHERE product_id = 1;


    3.b) Update qty = 3 pada transaction detail dengan product id 1.

UPDATE "transaction_detail" SET
qty = 3
WHERE product_id = 1;


4. Delete
    4.a) Delete data pada tabel product dengan id 1.

DELETE FROM "product"
WHERE id = 1;

    4.b) Delete pada tabel product dengan product-type id 1.

DELETE FROM "product"
WHERE product_type_id = 1;

RELEASE 2: Join, Union, Sub-query, Function

1. Gabungkan data transaksi dari user id 1 dan user id 2.

SELECT "details"
	FROM "transaction_details" WHERE transaction_details_id=1
UNION
SELECT "details"
	FROM "transaction_details" WHERE transaction_details_id=2

2. Tampilkan jumlah harga transaksi user id 1.

SELECT u.username, SUM(d.total_transaksi) AS total_harga_transaksi
FROM users u
RIGHT JOIN total_transaksi d ON u.id = d.user_id
WHERE u.id = 1;

3. Tampilkan total transaksi dengan product type 2.

SELECT SUM("transaction")
FROM "product_type" WHERE product_type_id=2

4. Tampilkan semua field table product dan field name table product type yang saling berhubungan.

SELECT *
FROM "transaction_details"
LEFT JOIN product_type ON "transaction_details".id = product_type.id;


5. Tampilkan semua field table transaction, field name table product dan field name table user.

SELECT 
   "transaction".*,
    product_table.product_name AS product_name,
    user.username AS user_name
FROM 
    "transaction"

6. Tampilkan data products yang tidak pernah ada di tabel transaction_details dengan sub-query.

SELECT *
FROM product
WHERE id IN (
    SELECT product_id
    FROM transaction
    WHERE transaction_detail = 0
    GROUP BY product_id
    HAVING COUNT(*) >= 1);